{
  "openapi": "3.1.0",
  "info": {
    "title": "BCIGradedExercise_Lampinen_Rotonen_API",
    "version": "1.0",
    "summary": "Graded exercise for BCI course. API idea is to serve as platform for selling or buying used items"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/register": {
      "post": {
        "summary": "",
        "operationId": "post-register",
        "responses": {
          "201": {
            "description": "User created"
          },
          "400": {
            "description": "Request has missing or malformed information"
          }
        },
        "description": "Endpoint is used for registering new account to the platform.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userName": {
                    "type": "string"
                  },
                  "passWord": {
                    "type": "string"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "birthDate": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              },
              "examples": {
                "example1": {
                  "userName": "TestAccount123",
                  "passWord": "123123qweqwe",
                  "fullName": "Matti Mehilainen",
                  "birthDate": "12-03-1961",
                  "email": "matti@gmail.com",
                  "value": {
                    "userName": "pekkaCx",
                    "passWord": "123asd",
                    "firstName": "Pekka",
                    "lastName": "Ollila",
                    "birthDate": "12-03-1991",
                    "email": "pekkaOllila@gmail.com"
                  }
                }
              }
            }
          },
          "description": ""
        }
      },
      "parameters": []
    },
    "/login": {
      "post": {
        "summary": "",
        "operationId": "post-login",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "description": "Endpoint is used for logging in to the platform",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userName": {
                    "type": "string"
                  },
                  "passWord": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "description": ""
        },
        "security": [
          {
            "HttpBasic": []
          }
        ]
      }
    },
    "/posts": {
      "post": {
        "summary": "",
        "operationId": "post-posts",
        "responses": {
          "201": {
            "description": "postID is given when post is posted."
          },
          "400": {
            "description": "Missing information"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "itemDescription": {
                    "type": "string"
                  },
                  "category": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  },
                  "image": {
                    "type": "array",
                    "maxItems": 4,
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "askingPrice": {
                    "type": "string"
                  },
                  "dateOfPosting": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-09-16"
                  },
                  "deliveryType": {
                    "type": "string"
                  },
                  "sellersInfo": {
                    "type": "object",
                    "properties": {
                      "firstName": {
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "phone": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "examples": {
                "example-1": {
                  "title": "string",
                  "itemDescription": "string",
                  "category": "string",
                  "location": "string",
                  "image": [
                    "string"
                  ],
                  "askingPrice": "string",
                  "dateOfPosting": "2021-09-16",
                  "deliveryType": [
                    true
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "HttpBasic": []
          }
        ],
        "description": "Endpoint is used to post a posting. Remember to store the postID after successful post. Atleast title, category and price must be given."
      },
      "get": {
        "summary": "",
        "operationId": "get-posts",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "category"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "location"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "dateOfPosting"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "postID"
          }
        ],
        "description": "Endpoint is used to get posts. Query params can be used but only ONE at the time. When getting with dateOfPosting, date must be exactly the same. Example: \"2021-10-06\""
      },
      "put": {
        "summary": "",
        "operationId": "put-posts",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "HttpBasic": []
          }
        ],
        "description": "Endpoint is used to modify posts. User must be logged in and can only modify his own postings.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "postID",
            "description": "Your post's ID. Id is given when you created post."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Posts"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "",
        "operationId": "delete-posts",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "HttpBasic": []
          }
        ],
        "description": "Endpoint is used to delete posts. User must be logged in and can only delete his own postings.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "postID",
            "description": "Your post's ID. Id is given when you created post."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "": {
      "get": {
        "summary": "Your GET endpoint",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get",
        "description": "Root endpoint. Responded with guides to correct endpoints. This endpoint is not used."
      },
      "parameters": []
    }
  },
  "components": {
    "schemas": {
      "User": {
        "title": "BasicAuth",
        "type": "object",
        "description": "",
        "examples": [
          {
            "id": 142,
            "firstName": "Alice",
            "lastName": "Smith",
            "email": "alice.smith@gmail.com",
            "dateOfBirth": "1997-10-31",
            "emailVerified": true,
            "signUpDate": "2019-08-24"
          }
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the given user."
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "example": "1997-10-31"
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Set to true if the user's email has been verified."
          },
          "createDate": {
            "type": "string",
            "format": "date",
            "description": "The date that the user was created."
          }
        },
        "required": [
          "id",
          "firstName",
          "lastName",
          "email",
          "emailVerified"
        ],
        "x-internal": false
      },
      "Posts": {
        "title": "Posts",
        "type": "object",
        "description": "",
        "properties": {
          "title": {
            "type": "string"
          },
          "itemDescription": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "image": {
            "type": "array",
            "maxItems": 4,
            "items": {
              "type": "string",
              "format": "binary"
            }
          },
          "askingPrice": {
            "type": "string"
          },
          "dateOfPosting": {
            "type": "string"
          },
          "deliveryType": {
            "type": "object",
            "properties": {
              "shipping": {
                "type": "boolean"
              },
              "pickUp": {
                "type": "boolean"
              }
            }
          },
          "sellersInfo": {
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              }
            }
          }
        }
      },
      "ErrorResponse": {
        "title": "ErrorResponse",
        "type": "object",
        "properties": {
          "errorDescription": {
            "type": "string"
          }
        },
        "examples": [
          {
            "errorDescription": "string"
          }
        ]
      }
    },
    "securitySchemes": {
      "HttpBasic": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}
